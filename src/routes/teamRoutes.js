const express = require('express');
const router = express.Router();
const teamModel = require('../models/teamModel');
const { verifyToken } = require('../middlewares/authMiddleware');
const db = require('../config/db');

/**
 * ‚úÖ Middleware ki·ªÉm tra quy·ªÅn Admin (n·∫øu mu·ªën)
 */
function isAdmin(req, res, next) {
  const user = req.user;
  if (!user || user.role !== 'Admin') {
    return res.status(403).json({ success: false, message: 'Access denied: Admin only' });
  }
  next();
}

/**
 * @swagger
 * tags:
 *   name: Teams
 *   description: API qu·∫£n l√Ω Team
 */

/**
 * @swagger
 * components:
 *   schemas:
 *     Team:
 *       type: object
 *       required:
 *         - maTeam
 *         - tenTeam
 *       properties:
 *         maTeam:
 *           type: string
 *           description: M√£ Team
 *         tenTeam:
 *           type: string
 *           description: T√™n Team
 *         trangThaiNhom:
 *           type: string
 *           description: Tr·∫°ng th√°i Team (Active, Locked, Voting, Open)
 *         moTaNhom:
 *           type: string
 *           description: M√¥ t·∫£ Team
 *         soLuongThanhVienToiDa:
 *           type: integer
 *           description: S·ªë l∆∞·ª£ng th√†nh vi√™n t·ªëi ƒëa
 *         leaderID:
 *           type: string
 *           description: ID Leader
 *         leaderName:
 *           type: string
 *           description: T√™n Leader
 */

/**
 * @swagger
 * /api/teams:
 *   get:
 *     summary: L·∫•y danh s√°ch t·∫•t c·∫£ team
 *     tags: [Teams]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Danh s√°ch Team
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/Team'
 *       500:
 *         description: L·ªói server
 */
router.get('/', async (req, res) => {
  try {
    const teams = await teamModel.getAll();
    res.json({ success: true, data: teams });
  } catch (error) {
    console.error('Error fetching teams:', error);
    res.status(500).json({ success: false, message: 'Server error' });
  }
});

/**
 * @swagger
 * /api/teams/{id}:
 *   get:
 *     summary: L·∫•y th√¥ng tin team theo m√£
 *     tags: [Teams]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: M√£ Team
 *     responses:
 *       200:
 *         description: Th√¥ng tin Team
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Team'
 *       404:
 *         description: Team kh√¥ng t·ªìn t·∫°i
 *       500:
 *         description: L·ªói server
 */
router.get('/:id', async (req, res) => {
  try {
    const team = await teamModel.findById(req.params.id);
    if (!team) return res.status(404).json({ success: false, message: 'Team not found' });
    res.json({ success: true, data: team });
  } catch (error) {
    console.error('Error fetching team:', error);
    res.status(500).json({ success: false, message: 'Server error' });
  }
});

/**
 * @swagger
 * /api/teams:
 *   post:
 *     summary: T·∫°o m·ªõi Team
 *     tags: [Teams]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Team'
 *     responses:
 *       200:
 *         description: Team t·∫°o th√†nh c√¥ng
 *       400:
 *         description: Thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc
 *       500:
 *         description: L·ªói server
 */
/**
 * @swagger
 * /api/teams:
 *   post:
 *     summary: T·∫°o m·ªõi Team
 *     tags: [Teams]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Team'
 *     responses:
 *       200:
 *         description: Team t·∫°o th√†nh c√¥ng
 *       400:
 *         description: Thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc
 *       500:
 *         description: L·ªói server
 */
router.post('/', async (req, res) => {
  try {
    const { maTeam, tenTeam, trangThaiNhom, moTaNhom, soLuongThanhVienToiDa } = req.body;

    // ‚úÖ Validation
    if (!maTeam || !tenTeam) {
      return res.status(400).json({ 
        success: false, 
        message: 'Missing required fields: maTeam, tenTeam' 
      });
    }

    // ‚úÖ Ki·ªÉm tra tr√πng l·∫∑p
    const existing = await teamModel.findById(maTeam);
    if (existing) {
      return res.status(409).json({ 
        success: false, 
        message: 'Team ID already exists' 
      });
    }

    // ‚úÖ Chu·∫©n b·ªã d·ªØ li·ªáu
    const teamData = {
      maTeam,
      tenTeam,
      trangThaiNhom: trangThaiNhom || 'Open',
      moTaNhom: moTaNhom || '',
      soLuongThanhVienToiDa: soLuongThanhVienToiDa || 5,
      leaderID: null,
      leaderName: null,
    };

    // ‚úÖ T·∫°o team
    await teamModel.create(teamData);

    // ‚úÖ Tr·∫£ v·ªÅ ngay d·ªØ li·ªáu v·ª´a t·∫°o (kh√¥ng c·∫ßn query l·∫°i)
    res.json({ 
      success: true, 
      message: 'Team created successfully',
      data: {
        MaTeam: teamData.maTeam,
        TenTeam: teamData.tenTeam,
        TrangThaiNhom: teamData.trangThaiNhom,
        MoTaNhom: teamData.moTaNhom,
        SoLuongThanhVienToiDa: teamData.soLuongThanhVienToiDa,
        LeaderID: teamData.leaderID,
        LeaderName: teamData.leaderName,
        SoLuongThanhVienHienTai: 0  // Team m·ªõi lu√¥n c√≥ 0 members
      }
    });
  } catch (error) {
    console.error('Error creating team:', error);
    res.status(500).json({ 
      success: false, 
      message: error.message || 'Server error' 
    });
  }
});

/**
 * @swagger
 * /api/teams/{id}:
 *   put:
 *     summary: C·∫≠p nh·∫≠t Team
 *     tags: [Teams]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: M√£ Team
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Team'
 *     responses:
 *       200:
 *         description: Team c·∫≠p nh·∫≠t th√†nh c√¥ng
 *       404:
 *         description: Team kh√¥ng t·ªìn t·∫°i
 *       500:
 *         description: L·ªói server
 */
router.put('/:id', async (req, res) => {
  try {
    const {
      tenTeam,
      trangThaiNhom,
      moTaNhom,
      soLuongThanhVienToiDa,
      leaderID,
      leaderName,
      status, // ‚úÖ Th√™m c·ªôt Status
    } = req.body;
    const { id } = req.params;

    const oldTeam = await teamModel.findById(id);
    if (!oldTeam)
      return res.status(404).json({ success: false, message: 'Team not found' });

    await teamModel.update({
      maTeam: id,
      tenTeam: tenTeam ?? oldTeam.TenTeam,
      trangThaiNhom: trangThaiNhom ?? oldTeam.TrangThaiNhom,
      moTaNhom: moTaNhom ?? oldTeam.MoTaNhom,
      soLuongThanhVienToiDa: soLuongThanhVienToiDa ?? oldTeam.SoLuongThanhVienToiDa,
      leaderID: leaderID ?? oldTeam.LeaderID,
      leaderName: leaderName ?? oldTeam.LeaderName,
      status: status ?? oldTeam.Status, // ‚úÖ C·∫≠p nh·∫≠t th√™m c·ªôt Status
    });

    res.json({ success: true, message: 'Team updated successfully' });
  } catch (error) {
    console.error('Error updating team:', error);
    res.status(500).json({ success: false, message: 'Server error' });
  }
});


/**
 * @swagger
 * /api/teams/{id}:
 *   delete:
 *     summary: Xo√° Team
 *     tags: [Teams]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: M√£ Team
 *     responses:
 *       200:
 *         description: Team xo√° th√†nh c√¥ng
 *       404:
 *         description: Team kh√¥ng t·ªìn t·∫°i
 *       500:
 *         description: L·ªói server
 */
router.delete('/:id', async (req, res) => {
  const teamId = req.params.id;

  console.log('üóëÔ∏è DELETE request for team:', teamId); // Debug

  try {
    // ‚úÖ Ki·ªÉm tra team c√≥ t·ªìn t·∫°i kh√¥ng
    const existingTeam = await teamModel.findById(teamId);
    
    if (!existingTeam) {
      console.log(`‚ùå Team ${teamId} not found`);
      return res.status(404).json({ 
        success: false, 
        message: 'Team not found' 
      });
    }

    console.log(`‚úÖ Team ${teamId} found, proceeding to delete`);

    // 1Ô∏è‚É£ Reset team c·ªßa t·∫•t c·∫£ student trong team ƒë√≥
    await db.execute('UPDATE Student SET Team = NULL WHERE Team = ?', [teamId]);

    // 2Ô∏è‚É£ Xo√° votes li√™n quan (n·∫øu c√≥)
    try {
      await db.execute('DELETE FROM TeamVotes WHERE teamId = ?', [teamId]);
    } catch (voteErr) {
      console.warn('‚ö†Ô∏è No votes to delete or table does not exist:', voteErr.message);
    }

    // 3Ô∏è‚É£ Xo√° team
    const result = await teamModel.delete(teamId);
    
    if (result.affectedRows === 0) {
      console.log(`‚ùå Team ${teamId} delete failed - no rows affected`);
      return res.status(404).json({ 
        success: false, 
        message: 'Team not found or already deleted' 
      });
    }

    console.log(`‚úÖ Team ${teamId} deleted successfully`);
    
    res.json({ 
      success: true, 
      message: 'Team deleted successfully' 
    });
  } catch (error) {
    console.error('‚ùå Error deleting team:', error.message, error.stack);
    res.status(500).json({ 
      success: false, 
      message: error.message 
    });
  }
});



module.exports = router;
